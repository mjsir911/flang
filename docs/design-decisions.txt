We won't use UML because it's too different from what we want.
The compiler should go from svg to C.
The editor should edit svg.
I don't think we should have an end statement because it is unnecesary. You could have an infinite amount of end statements coming off of everything and it wouldn't make a difference.
The following redundancies are implemented for convenience:
o keyboard and print can both be made from putchar and getchar from C' stdio.h.
o constants could've been made by adding starts together if starts gave 1 instead of 0.
o left and equals can both be implemented with greater than
o minus can implement all other math
o busses can be implemented as follows base flang:
	- They are represented as the size followed by the values.
	- None of the bus functions would be able to be their own functions because they would take more than one input on one of their inputs or be impure.
	- Push would separate the first value from the rest on the left side by counting them, and using a greater than to sort the left inputs. The first left input would be incremented, and sent out. It would be gaurenteed to go first because of another counter. Then, the other left inputs would go. Then, the right input would go last because of the counter.
	- Pop would be the opposite.
	- Left rotate would take the second value and give it last. You would do this with counters again.
	- Right rotate would be the opposite.
Because we have busses, we need neither impure functions nor functions that don't wait for all their inputs to come before they process.
That leaves only a start that gives 1, greater than, and minus. That would be a pretty cool language.
